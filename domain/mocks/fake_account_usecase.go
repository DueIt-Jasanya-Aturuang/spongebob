// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	domainaccount "github.com/DueIt-Jasanya-Aturuang/spongebob/domain/domain-account"
	domainprofile "github.com/DueIt-Jasanya-Aturuang/spongebob/domain/domain-profile"
	domainuser "github.com/DueIt-Jasanya-Aturuang/spongebob/domain/domain-user"
)

type FakeAccountUsecase struct {
	AccountUpdateStub        func(context.Context, domainaccount.UpdateAccountReq) (*domainuser.UserResp, *domainprofile.ProfileResp, error)
	accountUpdateMutex       sync.RWMutex
	accountUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 domainaccount.UpdateAccountReq
	}
	accountUpdateReturns struct {
		result1 *domainuser.UserResp
		result2 *domainprofile.ProfileResp
		result3 error
	}
	accountUpdateReturnsOnCall map[int]struct {
		result1 *domainuser.UserResp
		result2 *domainprofile.ProfileResp
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccountUsecase) AccountUpdate(arg1 context.Context, arg2 domainaccount.UpdateAccountReq) (*domainuser.UserResp, *domainprofile.ProfileResp, error) {
	fake.accountUpdateMutex.Lock()
	ret, specificReturn := fake.accountUpdateReturnsOnCall[len(fake.accountUpdateArgsForCall)]
	fake.accountUpdateArgsForCall = append(fake.accountUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 domainaccount.UpdateAccountReq
	}{arg1, arg2})
	stub := fake.AccountUpdateStub
	fakeReturns := fake.accountUpdateReturns
	fake.recordInvocation("AccountUpdate", []interface{}{arg1, arg2})
	fake.accountUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAccountUsecase) AccountUpdateCallCount() int {
	fake.accountUpdateMutex.RLock()
	defer fake.accountUpdateMutex.RUnlock()
	return len(fake.accountUpdateArgsForCall)
}

func (fake *FakeAccountUsecase) AccountUpdateCalls(stub func(context.Context, domainaccount.UpdateAccountReq) (*domainuser.UserResp, *domainprofile.ProfileResp, error)) {
	fake.accountUpdateMutex.Lock()
	defer fake.accountUpdateMutex.Unlock()
	fake.AccountUpdateStub = stub
}

func (fake *FakeAccountUsecase) AccountUpdateArgsForCall(i int) (context.Context, domainaccount.UpdateAccountReq) {
	fake.accountUpdateMutex.RLock()
	defer fake.accountUpdateMutex.RUnlock()
	argsForCall := fake.accountUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountUsecase) AccountUpdateReturns(result1 *domainuser.UserResp, result2 *domainprofile.ProfileResp, result3 error) {
	fake.accountUpdateMutex.Lock()
	defer fake.accountUpdateMutex.Unlock()
	fake.AccountUpdateStub = nil
	fake.accountUpdateReturns = struct {
		result1 *domainuser.UserResp
		result2 *domainprofile.ProfileResp
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountUsecase) AccountUpdateReturnsOnCall(i int, result1 *domainuser.UserResp, result2 *domainprofile.ProfileResp, result3 error) {
	fake.accountUpdateMutex.Lock()
	defer fake.accountUpdateMutex.Unlock()
	fake.AccountUpdateStub = nil
	if fake.accountUpdateReturnsOnCall == nil {
		fake.accountUpdateReturnsOnCall = make(map[int]struct {
			result1 *domainuser.UserResp
			result2 *domainprofile.ProfileResp
			result3 error
		})
	}
	fake.accountUpdateReturnsOnCall[i] = struct {
		result1 *domainuser.UserResp
		result2 *domainprofile.ProfileResp
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccountUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.accountUpdateMutex.RLock()
	defer fake.accountUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccountUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domainaccount.AccountUsecase = new(FakeAccountUsecase)
