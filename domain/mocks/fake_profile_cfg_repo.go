// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/dto"
	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/model"
	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/repository"
)

type FakeProfileCfgRepo struct {
	GetProfileCfgByIDStub        func(context.Context, string) (*model.ProfileCfg, error)
	getProfileCfgByIDMutex       sync.RWMutex
	getProfileCfgByIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getProfileCfgByIDReturns struct {
		result1 *model.ProfileCfg
		result2 error
	}
	getProfileCfgByIDReturnsOnCall map[int]struct {
		result1 *model.ProfileCfg
		result2 error
	}
	GetProfileCfgBySchedulerStub        func(context.Context, dto.ProfileCfgScheduler) (*[]model.ProfileCfg, error)
	getProfileCfgBySchedulerMutex       sync.RWMutex
	getProfileCfgBySchedulerArgsForCall []struct {
		arg1 context.Context
		arg2 dto.ProfileCfgScheduler
	}
	getProfileCfgBySchedulerReturns struct {
		result1 *[]model.ProfileCfg
		result2 error
	}
	getProfileCfgBySchedulerReturnsOnCall map[int]struct {
		result1 *[]model.ProfileCfg
		result2 error
	}
	StoreProfileCfgStub        func(context.Context, model.ProfileCfg) error
	storeProfileCfgMutex       sync.RWMutex
	storeProfileCfgArgsForCall []struct {
		arg1 context.Context
		arg2 model.ProfileCfg
	}
	storeProfileCfgReturns struct {
		result1 error
	}
	storeProfileCfgReturnsOnCall map[int]struct {
		result1 error
	}
	UoWStub        func() repository.UnitOfWork
	uoWMutex       sync.RWMutex
	uoWArgsForCall []struct {
	}
	uoWReturns struct {
		result1 repository.UnitOfWork
	}
	uoWReturnsOnCall map[int]struct {
		result1 repository.UnitOfWork
	}
	UpdateProfileCfgStub        func(context.Context, model.ProfileCfg) error
	updateProfileCfgMutex       sync.RWMutex
	updateProfileCfgArgsForCall []struct {
		arg1 context.Context
		arg2 model.ProfileCfg
	}
	updateProfileCfgReturns struct {
		result1 error
	}
	updateProfileCfgReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProfileCfgRepo) GetProfileCfgByID(arg1 context.Context, arg2 string) (*model.ProfileCfg, error) {
	fake.getProfileCfgByIDMutex.Lock()
	ret, specificReturn := fake.getProfileCfgByIDReturnsOnCall[len(fake.getProfileCfgByIDArgsForCall)]
	fake.getProfileCfgByIDArgsForCall = append(fake.getProfileCfgByIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetProfileCfgByIDStub
	fakeReturns := fake.getProfileCfgByIDReturns
	fake.recordInvocation("GetProfileCfgByID", []interface{}{arg1, arg2})
	fake.getProfileCfgByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileCfgRepo) GetProfileCfgByIDCallCount() int {
	fake.getProfileCfgByIDMutex.RLock()
	defer fake.getProfileCfgByIDMutex.RUnlock()
	return len(fake.getProfileCfgByIDArgsForCall)
}

func (fake *FakeProfileCfgRepo) GetProfileCfgByIDCalls(stub func(context.Context, string) (*model.ProfileCfg, error)) {
	fake.getProfileCfgByIDMutex.Lock()
	defer fake.getProfileCfgByIDMutex.Unlock()
	fake.GetProfileCfgByIDStub = stub
}

func (fake *FakeProfileCfgRepo) GetProfileCfgByIDArgsForCall(i int) (context.Context, string) {
	fake.getProfileCfgByIDMutex.RLock()
	defer fake.getProfileCfgByIDMutex.RUnlock()
	argsForCall := fake.getProfileCfgByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileCfgRepo) GetProfileCfgByIDReturns(result1 *model.ProfileCfg, result2 error) {
	fake.getProfileCfgByIDMutex.Lock()
	defer fake.getProfileCfgByIDMutex.Unlock()
	fake.GetProfileCfgByIDStub = nil
	fake.getProfileCfgByIDReturns = struct {
		result1 *model.ProfileCfg
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgRepo) GetProfileCfgByIDReturnsOnCall(i int, result1 *model.ProfileCfg, result2 error) {
	fake.getProfileCfgByIDMutex.Lock()
	defer fake.getProfileCfgByIDMutex.Unlock()
	fake.GetProfileCfgByIDStub = nil
	if fake.getProfileCfgByIDReturnsOnCall == nil {
		fake.getProfileCfgByIDReturnsOnCall = make(map[int]struct {
			result1 *model.ProfileCfg
			result2 error
		})
	}
	fake.getProfileCfgByIDReturnsOnCall[i] = struct {
		result1 *model.ProfileCfg
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgRepo) GetProfileCfgByScheduler(arg1 context.Context, arg2 dto.ProfileCfgScheduler) (*[]model.ProfileCfg, error) {
	fake.getProfileCfgBySchedulerMutex.Lock()
	ret, specificReturn := fake.getProfileCfgBySchedulerReturnsOnCall[len(fake.getProfileCfgBySchedulerArgsForCall)]
	fake.getProfileCfgBySchedulerArgsForCall = append(fake.getProfileCfgBySchedulerArgsForCall, struct {
		arg1 context.Context
		arg2 dto.ProfileCfgScheduler
	}{arg1, arg2})
	stub := fake.GetProfileCfgBySchedulerStub
	fakeReturns := fake.getProfileCfgBySchedulerReturns
	fake.recordInvocation("GetProfileCfgByScheduler", []interface{}{arg1, arg2})
	fake.getProfileCfgBySchedulerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileCfgRepo) GetProfileCfgBySchedulerCallCount() int {
	fake.getProfileCfgBySchedulerMutex.RLock()
	defer fake.getProfileCfgBySchedulerMutex.RUnlock()
	return len(fake.getProfileCfgBySchedulerArgsForCall)
}

func (fake *FakeProfileCfgRepo) GetProfileCfgBySchedulerCalls(stub func(context.Context, dto.ProfileCfgScheduler) (*[]model.ProfileCfg, error)) {
	fake.getProfileCfgBySchedulerMutex.Lock()
	defer fake.getProfileCfgBySchedulerMutex.Unlock()
	fake.GetProfileCfgBySchedulerStub = stub
}

func (fake *FakeProfileCfgRepo) GetProfileCfgBySchedulerArgsForCall(i int) (context.Context, dto.ProfileCfgScheduler) {
	fake.getProfileCfgBySchedulerMutex.RLock()
	defer fake.getProfileCfgBySchedulerMutex.RUnlock()
	argsForCall := fake.getProfileCfgBySchedulerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileCfgRepo) GetProfileCfgBySchedulerReturns(result1 *[]model.ProfileCfg, result2 error) {
	fake.getProfileCfgBySchedulerMutex.Lock()
	defer fake.getProfileCfgBySchedulerMutex.Unlock()
	fake.GetProfileCfgBySchedulerStub = nil
	fake.getProfileCfgBySchedulerReturns = struct {
		result1 *[]model.ProfileCfg
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgRepo) GetProfileCfgBySchedulerReturnsOnCall(i int, result1 *[]model.ProfileCfg, result2 error) {
	fake.getProfileCfgBySchedulerMutex.Lock()
	defer fake.getProfileCfgBySchedulerMutex.Unlock()
	fake.GetProfileCfgBySchedulerStub = nil
	if fake.getProfileCfgBySchedulerReturnsOnCall == nil {
		fake.getProfileCfgBySchedulerReturnsOnCall = make(map[int]struct {
			result1 *[]model.ProfileCfg
			result2 error
		})
	}
	fake.getProfileCfgBySchedulerReturnsOnCall[i] = struct {
		result1 *[]model.ProfileCfg
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgRepo) StoreProfileCfg(arg1 context.Context, arg2 model.ProfileCfg) error {
	fake.storeProfileCfgMutex.Lock()
	ret, specificReturn := fake.storeProfileCfgReturnsOnCall[len(fake.storeProfileCfgArgsForCall)]
	fake.storeProfileCfgArgsForCall = append(fake.storeProfileCfgArgsForCall, struct {
		arg1 context.Context
		arg2 model.ProfileCfg
	}{arg1, arg2})
	stub := fake.StoreProfileCfgStub
	fakeReturns := fake.storeProfileCfgReturns
	fake.recordInvocation("StoreProfileCfg", []interface{}{arg1, arg2})
	fake.storeProfileCfgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProfileCfgRepo) StoreProfileCfgCallCount() int {
	fake.storeProfileCfgMutex.RLock()
	defer fake.storeProfileCfgMutex.RUnlock()
	return len(fake.storeProfileCfgArgsForCall)
}

func (fake *FakeProfileCfgRepo) StoreProfileCfgCalls(stub func(context.Context, model.ProfileCfg) error) {
	fake.storeProfileCfgMutex.Lock()
	defer fake.storeProfileCfgMutex.Unlock()
	fake.StoreProfileCfgStub = stub
}

func (fake *FakeProfileCfgRepo) StoreProfileCfgArgsForCall(i int) (context.Context, model.ProfileCfg) {
	fake.storeProfileCfgMutex.RLock()
	defer fake.storeProfileCfgMutex.RUnlock()
	argsForCall := fake.storeProfileCfgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileCfgRepo) StoreProfileCfgReturns(result1 error) {
	fake.storeProfileCfgMutex.Lock()
	defer fake.storeProfileCfgMutex.Unlock()
	fake.StoreProfileCfgStub = nil
	fake.storeProfileCfgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProfileCfgRepo) StoreProfileCfgReturnsOnCall(i int, result1 error) {
	fake.storeProfileCfgMutex.Lock()
	defer fake.storeProfileCfgMutex.Unlock()
	fake.StoreProfileCfgStub = nil
	if fake.storeProfileCfgReturnsOnCall == nil {
		fake.storeProfileCfgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeProfileCfgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProfileCfgRepo) UoW() repository.UnitOfWork {
	fake.uoWMutex.Lock()
	ret, specificReturn := fake.uoWReturnsOnCall[len(fake.uoWArgsForCall)]
	fake.uoWArgsForCall = append(fake.uoWArgsForCall, struct {
	}{})
	stub := fake.UoWStub
	fakeReturns := fake.uoWReturns
	fake.recordInvocation("UoW", []interface{}{})
	fake.uoWMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProfileCfgRepo) UoWCallCount() int {
	fake.uoWMutex.RLock()
	defer fake.uoWMutex.RUnlock()
	return len(fake.uoWArgsForCall)
}

func (fake *FakeProfileCfgRepo) UoWCalls(stub func() repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = stub
}

func (fake *FakeProfileCfgRepo) UoWReturns(result1 repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = nil
	fake.uoWReturns = struct {
		result1 repository.UnitOfWork
	}{result1}
}

func (fake *FakeProfileCfgRepo) UoWReturnsOnCall(i int, result1 repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = nil
	if fake.uoWReturnsOnCall == nil {
		fake.uoWReturnsOnCall = make(map[int]struct {
			result1 repository.UnitOfWork
		})
	}
	fake.uoWReturnsOnCall[i] = struct {
		result1 repository.UnitOfWork
	}{result1}
}

func (fake *FakeProfileCfgRepo) UpdateProfileCfg(arg1 context.Context, arg2 model.ProfileCfg) error {
	fake.updateProfileCfgMutex.Lock()
	ret, specificReturn := fake.updateProfileCfgReturnsOnCall[len(fake.updateProfileCfgArgsForCall)]
	fake.updateProfileCfgArgsForCall = append(fake.updateProfileCfgArgsForCall, struct {
		arg1 context.Context
		arg2 model.ProfileCfg
	}{arg1, arg2})
	stub := fake.UpdateProfileCfgStub
	fakeReturns := fake.updateProfileCfgReturns
	fake.recordInvocation("UpdateProfileCfg", []interface{}{arg1, arg2})
	fake.updateProfileCfgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProfileCfgRepo) UpdateProfileCfgCallCount() int {
	fake.updateProfileCfgMutex.RLock()
	defer fake.updateProfileCfgMutex.RUnlock()
	return len(fake.updateProfileCfgArgsForCall)
}

func (fake *FakeProfileCfgRepo) UpdateProfileCfgCalls(stub func(context.Context, model.ProfileCfg) error) {
	fake.updateProfileCfgMutex.Lock()
	defer fake.updateProfileCfgMutex.Unlock()
	fake.UpdateProfileCfgStub = stub
}

func (fake *FakeProfileCfgRepo) UpdateProfileCfgArgsForCall(i int) (context.Context, model.ProfileCfg) {
	fake.updateProfileCfgMutex.RLock()
	defer fake.updateProfileCfgMutex.RUnlock()
	argsForCall := fake.updateProfileCfgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileCfgRepo) UpdateProfileCfgReturns(result1 error) {
	fake.updateProfileCfgMutex.Lock()
	defer fake.updateProfileCfgMutex.Unlock()
	fake.UpdateProfileCfgStub = nil
	fake.updateProfileCfgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProfileCfgRepo) UpdateProfileCfgReturnsOnCall(i int, result1 error) {
	fake.updateProfileCfgMutex.Lock()
	defer fake.updateProfileCfgMutex.Unlock()
	fake.UpdateProfileCfgStub = nil
	if fake.updateProfileCfgReturnsOnCall == nil {
		fake.updateProfileCfgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateProfileCfgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProfileCfgRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProfileCfgByIDMutex.RLock()
	defer fake.getProfileCfgByIDMutex.RUnlock()
	fake.getProfileCfgBySchedulerMutex.RLock()
	defer fake.getProfileCfgBySchedulerMutex.RUnlock()
	fake.storeProfileCfgMutex.RLock()
	defer fake.storeProfileCfgMutex.RUnlock()
	fake.uoWMutex.RLock()
	defer fake.uoWMutex.RUnlock()
	fake.updateProfileCfgMutex.RLock()
	defer fake.updateProfileCfgMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProfileCfgRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.ProfileCfgRepo = new(FakeProfileCfgRepo)
