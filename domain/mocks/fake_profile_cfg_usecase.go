// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/dto"
	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/usecase"
)

type FakeProfileCfgUsecase struct {
	CreateProfileCfgStub        func(context.Context, dto.ProfileCfgReq) (*dto.ProfileCfgResp, error)
	createProfileCfgMutex       sync.RWMutex
	createProfileCfgArgsForCall []struct {
		arg1 context.Context
		arg2 dto.ProfileCfgReq
	}
	createProfileCfgReturns struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}
	createProfileCfgReturnsOnCall map[int]struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}
	GetProfileCfgByIDStub        func(context.Context, string) (*dto.ProfileCfgResp, error)
	getProfileCfgByIDMutex       sync.RWMutex
	getProfileCfgByIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getProfileCfgByIDReturns struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}
	getProfileCfgByIDReturnsOnCall map[int]struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}
	UpdateProfileCfgStub        func(context.Context, dto.ProfileCfgReq, string) (*dto.ProfileCfgResp, error)
	updateProfileCfgMutex       sync.RWMutex
	updateProfileCfgArgsForCall []struct {
		arg1 context.Context
		arg2 dto.ProfileCfgReq
		arg3 string
	}
	updateProfileCfgReturns struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}
	updateProfileCfgReturnsOnCall map[int]struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProfileCfgUsecase) CreateProfileCfg(arg1 context.Context, arg2 dto.ProfileCfgReq) (*dto.ProfileCfgResp, error) {
	fake.createProfileCfgMutex.Lock()
	ret, specificReturn := fake.createProfileCfgReturnsOnCall[len(fake.createProfileCfgArgsForCall)]
	fake.createProfileCfgArgsForCall = append(fake.createProfileCfgArgsForCall, struct {
		arg1 context.Context
		arg2 dto.ProfileCfgReq
	}{arg1, arg2})
	stub := fake.CreateProfileCfgStub
	fakeReturns := fake.createProfileCfgReturns
	fake.recordInvocation("CreateProfileCfg", []interface{}{arg1, arg2})
	fake.createProfileCfgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileCfgUsecase) CreateProfileCfgCallCount() int {
	fake.createProfileCfgMutex.RLock()
	defer fake.createProfileCfgMutex.RUnlock()
	return len(fake.createProfileCfgArgsForCall)
}

func (fake *FakeProfileCfgUsecase) CreateProfileCfgCalls(stub func(context.Context, dto.ProfileCfgReq) (*dto.ProfileCfgResp, error)) {
	fake.createProfileCfgMutex.Lock()
	defer fake.createProfileCfgMutex.Unlock()
	fake.CreateProfileCfgStub = stub
}

func (fake *FakeProfileCfgUsecase) CreateProfileCfgArgsForCall(i int) (context.Context, dto.ProfileCfgReq) {
	fake.createProfileCfgMutex.RLock()
	defer fake.createProfileCfgMutex.RUnlock()
	argsForCall := fake.createProfileCfgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileCfgUsecase) CreateProfileCfgReturns(result1 *dto.ProfileCfgResp, result2 error) {
	fake.createProfileCfgMutex.Lock()
	defer fake.createProfileCfgMutex.Unlock()
	fake.CreateProfileCfgStub = nil
	fake.createProfileCfgReturns = struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgUsecase) CreateProfileCfgReturnsOnCall(i int, result1 *dto.ProfileCfgResp, result2 error) {
	fake.createProfileCfgMutex.Lock()
	defer fake.createProfileCfgMutex.Unlock()
	fake.CreateProfileCfgStub = nil
	if fake.createProfileCfgReturnsOnCall == nil {
		fake.createProfileCfgReturnsOnCall = make(map[int]struct {
			result1 *dto.ProfileCfgResp
			result2 error
		})
	}
	fake.createProfileCfgReturnsOnCall[i] = struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgUsecase) GetProfileCfgByID(arg1 context.Context, arg2 string) (*dto.ProfileCfgResp, error) {
	fake.getProfileCfgByIDMutex.Lock()
	ret, specificReturn := fake.getProfileCfgByIDReturnsOnCall[len(fake.getProfileCfgByIDArgsForCall)]
	fake.getProfileCfgByIDArgsForCall = append(fake.getProfileCfgByIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetProfileCfgByIDStub
	fakeReturns := fake.getProfileCfgByIDReturns
	fake.recordInvocation("GetProfileCfgByID", []interface{}{arg1, arg2})
	fake.getProfileCfgByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileCfgUsecase) GetProfileCfgByIDCallCount() int {
	fake.getProfileCfgByIDMutex.RLock()
	defer fake.getProfileCfgByIDMutex.RUnlock()
	return len(fake.getProfileCfgByIDArgsForCall)
}

func (fake *FakeProfileCfgUsecase) GetProfileCfgByIDCalls(stub func(context.Context, string) (*dto.ProfileCfgResp, error)) {
	fake.getProfileCfgByIDMutex.Lock()
	defer fake.getProfileCfgByIDMutex.Unlock()
	fake.GetProfileCfgByIDStub = stub
}

func (fake *FakeProfileCfgUsecase) GetProfileCfgByIDArgsForCall(i int) (context.Context, string) {
	fake.getProfileCfgByIDMutex.RLock()
	defer fake.getProfileCfgByIDMutex.RUnlock()
	argsForCall := fake.getProfileCfgByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileCfgUsecase) GetProfileCfgByIDReturns(result1 *dto.ProfileCfgResp, result2 error) {
	fake.getProfileCfgByIDMutex.Lock()
	defer fake.getProfileCfgByIDMutex.Unlock()
	fake.GetProfileCfgByIDStub = nil
	fake.getProfileCfgByIDReturns = struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgUsecase) GetProfileCfgByIDReturnsOnCall(i int, result1 *dto.ProfileCfgResp, result2 error) {
	fake.getProfileCfgByIDMutex.Lock()
	defer fake.getProfileCfgByIDMutex.Unlock()
	fake.GetProfileCfgByIDStub = nil
	if fake.getProfileCfgByIDReturnsOnCall == nil {
		fake.getProfileCfgByIDReturnsOnCall = make(map[int]struct {
			result1 *dto.ProfileCfgResp
			result2 error
		})
	}
	fake.getProfileCfgByIDReturnsOnCall[i] = struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgUsecase) UpdateProfileCfg(arg1 context.Context, arg2 dto.ProfileCfgReq, arg3 string) (*dto.ProfileCfgResp, error) {
	fake.updateProfileCfgMutex.Lock()
	ret, specificReturn := fake.updateProfileCfgReturnsOnCall[len(fake.updateProfileCfgArgsForCall)]
	fake.updateProfileCfgArgsForCall = append(fake.updateProfileCfgArgsForCall, struct {
		arg1 context.Context
		arg2 dto.ProfileCfgReq
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UpdateProfileCfgStub
	fakeReturns := fake.updateProfileCfgReturns
	fake.recordInvocation("UpdateProfileCfg", []interface{}{arg1, arg2, arg3})
	fake.updateProfileCfgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileCfgUsecase) UpdateProfileCfgCallCount() int {
	fake.updateProfileCfgMutex.RLock()
	defer fake.updateProfileCfgMutex.RUnlock()
	return len(fake.updateProfileCfgArgsForCall)
}

func (fake *FakeProfileCfgUsecase) UpdateProfileCfgCalls(stub func(context.Context, dto.ProfileCfgReq, string) (*dto.ProfileCfgResp, error)) {
	fake.updateProfileCfgMutex.Lock()
	defer fake.updateProfileCfgMutex.Unlock()
	fake.UpdateProfileCfgStub = stub
}

func (fake *FakeProfileCfgUsecase) UpdateProfileCfgArgsForCall(i int) (context.Context, dto.ProfileCfgReq, string) {
	fake.updateProfileCfgMutex.RLock()
	defer fake.updateProfileCfgMutex.RUnlock()
	argsForCall := fake.updateProfileCfgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProfileCfgUsecase) UpdateProfileCfgReturns(result1 *dto.ProfileCfgResp, result2 error) {
	fake.updateProfileCfgMutex.Lock()
	defer fake.updateProfileCfgMutex.Unlock()
	fake.UpdateProfileCfgStub = nil
	fake.updateProfileCfgReturns = struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgUsecase) UpdateProfileCfgReturnsOnCall(i int, result1 *dto.ProfileCfgResp, result2 error) {
	fake.updateProfileCfgMutex.Lock()
	defer fake.updateProfileCfgMutex.Unlock()
	fake.UpdateProfileCfgStub = nil
	if fake.updateProfileCfgReturnsOnCall == nil {
		fake.updateProfileCfgReturnsOnCall = make(map[int]struct {
			result1 *dto.ProfileCfgResp
			result2 error
		})
	}
	fake.updateProfileCfgReturnsOnCall[i] = struct {
		result1 *dto.ProfileCfgResp
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileCfgUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createProfileCfgMutex.RLock()
	defer fake.createProfileCfgMutex.RUnlock()
	fake.getProfileCfgByIDMutex.RLock()
	defer fake.getProfileCfgByIDMutex.RUnlock()
	fake.updateProfileCfgMutex.RLock()
	defer fake.updateProfileCfgMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProfileCfgUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecase.ProfileCfgUsecase = new(FakeProfileCfgUsecase)
