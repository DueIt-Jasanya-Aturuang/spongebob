// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/model"
	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/repository"
)

type FakeProfileRepo struct {
	GetProfileByIDStub        func(context.Context, string) (*model.Profile, error)
	getProfileByIDMutex       sync.RWMutex
	getProfileByIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getProfileByIDReturns struct {
		result1 *model.Profile
		result2 error
	}
	getProfileByIDReturnsOnCall map[int]struct {
		result1 *model.Profile
		result2 error
	}
	GetProfileByUserIDStub        func(context.Context, string) (*model.Profile, error)
	getProfileByUserIDMutex       sync.RWMutex
	getProfileByUserIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getProfileByUserIDReturns struct {
		result1 *model.Profile
		result2 error
	}
	getProfileByUserIDReturnsOnCall map[int]struct {
		result1 *model.Profile
		result2 error
	}
	StoreProfileStub        func(context.Context, model.Profile) (model.Profile, error)
	storeProfileMutex       sync.RWMutex
	storeProfileArgsForCall []struct {
		arg1 context.Context
		arg2 model.Profile
	}
	storeProfileReturns struct {
		result1 model.Profile
		result2 error
	}
	storeProfileReturnsOnCall map[int]struct {
		result1 model.Profile
		result2 error
	}
	UoWStub        func() repository.UnitOfWork
	uoWMutex       sync.RWMutex
	uoWArgsForCall []struct {
	}
	uoWReturns struct {
		result1 repository.UnitOfWork
	}
	uoWReturnsOnCall map[int]struct {
		result1 repository.UnitOfWork
	}
	UpdateProfileStub        func(context.Context, model.Profile) (*model.Profile, error)
	updateProfileMutex       sync.RWMutex
	updateProfileArgsForCall []struct {
		arg1 context.Context
		arg2 model.Profile
	}
	updateProfileReturns struct {
		result1 *model.Profile
		result2 error
	}
	updateProfileReturnsOnCall map[int]struct {
		result1 *model.Profile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProfileRepo) GetProfileByID(arg1 context.Context, arg2 string) (*model.Profile, error) {
	fake.getProfileByIDMutex.Lock()
	ret, specificReturn := fake.getProfileByIDReturnsOnCall[len(fake.getProfileByIDArgsForCall)]
	fake.getProfileByIDArgsForCall = append(fake.getProfileByIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetProfileByIDStub
	fakeReturns := fake.getProfileByIDReturns
	fake.recordInvocation("GetProfileByID", []interface{}{arg1, arg2})
	fake.getProfileByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileRepo) GetProfileByIDCallCount() int {
	fake.getProfileByIDMutex.RLock()
	defer fake.getProfileByIDMutex.RUnlock()
	return len(fake.getProfileByIDArgsForCall)
}

func (fake *FakeProfileRepo) GetProfileByIDCalls(stub func(context.Context, string) (*model.Profile, error)) {
	fake.getProfileByIDMutex.Lock()
	defer fake.getProfileByIDMutex.Unlock()
	fake.GetProfileByIDStub = stub
}

func (fake *FakeProfileRepo) GetProfileByIDArgsForCall(i int) (context.Context, string) {
	fake.getProfileByIDMutex.RLock()
	defer fake.getProfileByIDMutex.RUnlock()
	argsForCall := fake.getProfileByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileRepo) GetProfileByIDReturns(result1 *model.Profile, result2 error) {
	fake.getProfileByIDMutex.Lock()
	defer fake.getProfileByIDMutex.Unlock()
	fake.GetProfileByIDStub = nil
	fake.getProfileByIDReturns = struct {
		result1 *model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) GetProfileByIDReturnsOnCall(i int, result1 *model.Profile, result2 error) {
	fake.getProfileByIDMutex.Lock()
	defer fake.getProfileByIDMutex.Unlock()
	fake.GetProfileByIDStub = nil
	if fake.getProfileByIDReturnsOnCall == nil {
		fake.getProfileByIDReturnsOnCall = make(map[int]struct {
			result1 *model.Profile
			result2 error
		})
	}
	fake.getProfileByIDReturnsOnCall[i] = struct {
		result1 *model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) GetProfileByUserID(arg1 context.Context, arg2 string) (*model.Profile, error) {
	fake.getProfileByUserIDMutex.Lock()
	ret, specificReturn := fake.getProfileByUserIDReturnsOnCall[len(fake.getProfileByUserIDArgsForCall)]
	fake.getProfileByUserIDArgsForCall = append(fake.getProfileByUserIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetProfileByUserIDStub
	fakeReturns := fake.getProfileByUserIDReturns
	fake.recordInvocation("GetProfileByUserID", []interface{}{arg1, arg2})
	fake.getProfileByUserIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileRepo) GetProfileByUserIDCallCount() int {
	fake.getProfileByUserIDMutex.RLock()
	defer fake.getProfileByUserIDMutex.RUnlock()
	return len(fake.getProfileByUserIDArgsForCall)
}

func (fake *FakeProfileRepo) GetProfileByUserIDCalls(stub func(context.Context, string) (*model.Profile, error)) {
	fake.getProfileByUserIDMutex.Lock()
	defer fake.getProfileByUserIDMutex.Unlock()
	fake.GetProfileByUserIDStub = stub
}

func (fake *FakeProfileRepo) GetProfileByUserIDArgsForCall(i int) (context.Context, string) {
	fake.getProfileByUserIDMutex.RLock()
	defer fake.getProfileByUserIDMutex.RUnlock()
	argsForCall := fake.getProfileByUserIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileRepo) GetProfileByUserIDReturns(result1 *model.Profile, result2 error) {
	fake.getProfileByUserIDMutex.Lock()
	defer fake.getProfileByUserIDMutex.Unlock()
	fake.GetProfileByUserIDStub = nil
	fake.getProfileByUserIDReturns = struct {
		result1 *model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) GetProfileByUserIDReturnsOnCall(i int, result1 *model.Profile, result2 error) {
	fake.getProfileByUserIDMutex.Lock()
	defer fake.getProfileByUserIDMutex.Unlock()
	fake.GetProfileByUserIDStub = nil
	if fake.getProfileByUserIDReturnsOnCall == nil {
		fake.getProfileByUserIDReturnsOnCall = make(map[int]struct {
			result1 *model.Profile
			result2 error
		})
	}
	fake.getProfileByUserIDReturnsOnCall[i] = struct {
		result1 *model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) StoreProfile(arg1 context.Context, arg2 model.Profile) (model.Profile, error) {
	fake.storeProfileMutex.Lock()
	ret, specificReturn := fake.storeProfileReturnsOnCall[len(fake.storeProfileArgsForCall)]
	fake.storeProfileArgsForCall = append(fake.storeProfileArgsForCall, struct {
		arg1 context.Context
		arg2 model.Profile
	}{arg1, arg2})
	stub := fake.StoreProfileStub
	fakeReturns := fake.storeProfileReturns
	fake.recordInvocation("StoreProfile", []interface{}{arg1, arg2})
	fake.storeProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileRepo) StoreProfileCallCount() int {
	fake.storeProfileMutex.RLock()
	defer fake.storeProfileMutex.RUnlock()
	return len(fake.storeProfileArgsForCall)
}

func (fake *FakeProfileRepo) StoreProfileCalls(stub func(context.Context, model.Profile) (model.Profile, error)) {
	fake.storeProfileMutex.Lock()
	defer fake.storeProfileMutex.Unlock()
	fake.StoreProfileStub = stub
}

func (fake *FakeProfileRepo) StoreProfileArgsForCall(i int) (context.Context, model.Profile) {
	fake.storeProfileMutex.RLock()
	defer fake.storeProfileMutex.RUnlock()
	argsForCall := fake.storeProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileRepo) StoreProfileReturns(result1 model.Profile, result2 error) {
	fake.storeProfileMutex.Lock()
	defer fake.storeProfileMutex.Unlock()
	fake.StoreProfileStub = nil
	fake.storeProfileReturns = struct {
		result1 model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) StoreProfileReturnsOnCall(i int, result1 model.Profile, result2 error) {
	fake.storeProfileMutex.Lock()
	defer fake.storeProfileMutex.Unlock()
	fake.StoreProfileStub = nil
	if fake.storeProfileReturnsOnCall == nil {
		fake.storeProfileReturnsOnCall = make(map[int]struct {
			result1 model.Profile
			result2 error
		})
	}
	fake.storeProfileReturnsOnCall[i] = struct {
		result1 model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) UoW() repository.UnitOfWork {
	fake.uoWMutex.Lock()
	ret, specificReturn := fake.uoWReturnsOnCall[len(fake.uoWArgsForCall)]
	fake.uoWArgsForCall = append(fake.uoWArgsForCall, struct {
	}{})
	stub := fake.UoWStub
	fakeReturns := fake.uoWReturns
	fake.recordInvocation("UoW", []interface{}{})
	fake.uoWMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProfileRepo) UoWCallCount() int {
	fake.uoWMutex.RLock()
	defer fake.uoWMutex.RUnlock()
	return len(fake.uoWArgsForCall)
}

func (fake *FakeProfileRepo) UoWCalls(stub func() repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = stub
}

func (fake *FakeProfileRepo) UoWReturns(result1 repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = nil
	fake.uoWReturns = struct {
		result1 repository.UnitOfWork
	}{result1}
}

func (fake *FakeProfileRepo) UoWReturnsOnCall(i int, result1 repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = nil
	if fake.uoWReturnsOnCall == nil {
		fake.uoWReturnsOnCall = make(map[int]struct {
			result1 repository.UnitOfWork
		})
	}
	fake.uoWReturnsOnCall[i] = struct {
		result1 repository.UnitOfWork
	}{result1}
}

func (fake *FakeProfileRepo) UpdateProfile(arg1 context.Context, arg2 model.Profile) (*model.Profile, error) {
	fake.updateProfileMutex.Lock()
	ret, specificReturn := fake.updateProfileReturnsOnCall[len(fake.updateProfileArgsForCall)]
	fake.updateProfileArgsForCall = append(fake.updateProfileArgsForCall, struct {
		arg1 context.Context
		arg2 model.Profile
	}{arg1, arg2})
	stub := fake.UpdateProfileStub
	fakeReturns := fake.updateProfileReturns
	fake.recordInvocation("UpdateProfile", []interface{}{arg1, arg2})
	fake.updateProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProfileRepo) UpdateProfileCallCount() int {
	fake.updateProfileMutex.RLock()
	defer fake.updateProfileMutex.RUnlock()
	return len(fake.updateProfileArgsForCall)
}

func (fake *FakeProfileRepo) UpdateProfileCalls(stub func(context.Context, model.Profile) (*model.Profile, error)) {
	fake.updateProfileMutex.Lock()
	defer fake.updateProfileMutex.Unlock()
	fake.UpdateProfileStub = stub
}

func (fake *FakeProfileRepo) UpdateProfileArgsForCall(i int) (context.Context, model.Profile) {
	fake.updateProfileMutex.RLock()
	defer fake.updateProfileMutex.RUnlock()
	argsForCall := fake.updateProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProfileRepo) UpdateProfileReturns(result1 *model.Profile, result2 error) {
	fake.updateProfileMutex.Lock()
	defer fake.updateProfileMutex.Unlock()
	fake.UpdateProfileStub = nil
	fake.updateProfileReturns = struct {
		result1 *model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) UpdateProfileReturnsOnCall(i int, result1 *model.Profile, result2 error) {
	fake.updateProfileMutex.Lock()
	defer fake.updateProfileMutex.Unlock()
	fake.UpdateProfileStub = nil
	if fake.updateProfileReturnsOnCall == nil {
		fake.updateProfileReturnsOnCall = make(map[int]struct {
			result1 *model.Profile
			result2 error
		})
	}
	fake.updateProfileReturnsOnCall[i] = struct {
		result1 *model.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeProfileRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProfileByIDMutex.RLock()
	defer fake.getProfileByIDMutex.RUnlock()
	fake.getProfileByUserIDMutex.RLock()
	defer fake.getProfileByUserIDMutex.RUnlock()
	fake.storeProfileMutex.RLock()
	defer fake.storeProfileMutex.RUnlock()
	fake.uoWMutex.RLock()
	defer fake.uoWMutex.RUnlock()
	fake.updateProfileMutex.RLock()
	defer fake.updateProfileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProfileRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.ProfileRepo = new(FakeProfileRepo)
