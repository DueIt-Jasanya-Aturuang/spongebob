// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/model"
	"github.com/DueIt-Jasanya-Aturuang/spongebob/domain/repository"
)

type FakeUserRepo struct {
	GetUserByIDStub        func(context.Context, string) (*model.User, error)
	getUserByIDMutex       sync.RWMutex
	getUserByIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserByIDReturns struct {
		result1 *model.User
		result2 error
	}
	getUserByIDReturnsOnCall map[int]struct {
		result1 *model.User
		result2 error
	}
	UoWStub        func() repository.UnitOfWork
	uoWMutex       sync.RWMutex
	uoWArgsForCall []struct {
	}
	uoWReturns struct {
		result1 repository.UnitOfWork
	}
	uoWReturnsOnCall map[int]struct {
		result1 repository.UnitOfWork
	}
	UpdateUserStub        func(context.Context, model.User) (*model.User, error)
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 context.Context
		arg2 model.User
	}
	updateUserReturns struct {
		result1 *model.User
		result2 error
	}
	updateUserReturnsOnCall map[int]struct {
		result1 *model.User
		result2 error
	}
	UpdateUsernameStub        func(context.Context, model.User) (*model.User, error)
	updateUsernameMutex       sync.RWMutex
	updateUsernameArgsForCall []struct {
		arg1 context.Context
		arg2 model.User
	}
	updateUsernameReturns struct {
		result1 *model.User
		result2 error
	}
	updateUsernameReturnsOnCall map[int]struct {
		result1 *model.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepo) GetUserByID(arg1 context.Context, arg2 string) (*model.User, error) {
	fake.getUserByIDMutex.Lock()
	ret, specificReturn := fake.getUserByIDReturnsOnCall[len(fake.getUserByIDArgsForCall)]
	fake.getUserByIDArgsForCall = append(fake.getUserByIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserByIDStub
	fakeReturns := fake.getUserByIDReturns
	fake.recordInvocation("GetUserByID", []interface{}{arg1, arg2})
	fake.getUserByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepo) GetUserByIDCallCount() int {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	return len(fake.getUserByIDArgsForCall)
}

func (fake *FakeUserRepo) GetUserByIDCalls(stub func(context.Context, string) (*model.User, error)) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = stub
}

func (fake *FakeUserRepo) GetUserByIDArgsForCall(i int) (context.Context, string) {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	argsForCall := fake.getUserByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepo) GetUserByIDReturns(result1 *model.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	fake.getUserByIDReturns = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) GetUserByIDReturnsOnCall(i int, result1 *model.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	if fake.getUserByIDReturnsOnCall == nil {
		fake.getUserByIDReturnsOnCall = make(map[int]struct {
			result1 *model.User
			result2 error
		})
	}
	fake.getUserByIDReturnsOnCall[i] = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) UoW() repository.UnitOfWork {
	fake.uoWMutex.Lock()
	ret, specificReturn := fake.uoWReturnsOnCall[len(fake.uoWArgsForCall)]
	fake.uoWArgsForCall = append(fake.uoWArgsForCall, struct {
	}{})
	stub := fake.UoWStub
	fakeReturns := fake.uoWReturns
	fake.recordInvocation("UoW", []interface{}{})
	fake.uoWMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepo) UoWCallCount() int {
	fake.uoWMutex.RLock()
	defer fake.uoWMutex.RUnlock()
	return len(fake.uoWArgsForCall)
}

func (fake *FakeUserRepo) UoWCalls(stub func() repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = stub
}

func (fake *FakeUserRepo) UoWReturns(result1 repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = nil
	fake.uoWReturns = struct {
		result1 repository.UnitOfWork
	}{result1}
}

func (fake *FakeUserRepo) UoWReturnsOnCall(i int, result1 repository.UnitOfWork) {
	fake.uoWMutex.Lock()
	defer fake.uoWMutex.Unlock()
	fake.UoWStub = nil
	if fake.uoWReturnsOnCall == nil {
		fake.uoWReturnsOnCall = make(map[int]struct {
			result1 repository.UnitOfWork
		})
	}
	fake.uoWReturnsOnCall[i] = struct {
		result1 repository.UnitOfWork
	}{result1}
}

func (fake *FakeUserRepo) UpdateUser(arg1 context.Context, arg2 model.User) (*model.User, error) {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 context.Context
		arg2 model.User
	}{arg1, arg2})
	stub := fake.UpdateUserStub
	fakeReturns := fake.updateUserReturns
	fake.recordInvocation("UpdateUser", []interface{}{arg1, arg2})
	fake.updateUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepo) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeUserRepo) UpdateUserCalls(stub func(context.Context, model.User) (*model.User, error)) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeUserRepo) UpdateUserArgsForCall(i int) (context.Context, model.User) {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepo) UpdateUserReturns(result1 *model.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) UpdateUserReturnsOnCall(i int, result1 *model.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 *model.User
			result2 error
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) UpdateUsername(arg1 context.Context, arg2 model.User) (*model.User, error) {
	fake.updateUsernameMutex.Lock()
	ret, specificReturn := fake.updateUsernameReturnsOnCall[len(fake.updateUsernameArgsForCall)]
	fake.updateUsernameArgsForCall = append(fake.updateUsernameArgsForCall, struct {
		arg1 context.Context
		arg2 model.User
	}{arg1, arg2})
	stub := fake.UpdateUsernameStub
	fakeReturns := fake.updateUsernameReturns
	fake.recordInvocation("UpdateUsername", []interface{}{arg1, arg2})
	fake.updateUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepo) UpdateUsernameCallCount() int {
	fake.updateUsernameMutex.RLock()
	defer fake.updateUsernameMutex.RUnlock()
	return len(fake.updateUsernameArgsForCall)
}

func (fake *FakeUserRepo) UpdateUsernameCalls(stub func(context.Context, model.User) (*model.User, error)) {
	fake.updateUsernameMutex.Lock()
	defer fake.updateUsernameMutex.Unlock()
	fake.UpdateUsernameStub = stub
}

func (fake *FakeUserRepo) UpdateUsernameArgsForCall(i int) (context.Context, model.User) {
	fake.updateUsernameMutex.RLock()
	defer fake.updateUsernameMutex.RUnlock()
	argsForCall := fake.updateUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepo) UpdateUsernameReturns(result1 *model.User, result2 error) {
	fake.updateUsernameMutex.Lock()
	defer fake.updateUsernameMutex.Unlock()
	fake.UpdateUsernameStub = nil
	fake.updateUsernameReturns = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) UpdateUsernameReturnsOnCall(i int, result1 *model.User, result2 error) {
	fake.updateUsernameMutex.Lock()
	defer fake.updateUsernameMutex.Unlock()
	fake.UpdateUsernameStub = nil
	if fake.updateUsernameReturnsOnCall == nil {
		fake.updateUsernameReturnsOnCall = make(map[int]struct {
			result1 *model.User
			result2 error
		})
	}
	fake.updateUsernameReturnsOnCall[i] = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	fake.uoWMutex.RLock()
	defer fake.uoWMutex.RUnlock()
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	fake.updateUsernameMutex.RLock()
	defer fake.updateUsernameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.UserRepo = new(FakeUserRepo)
