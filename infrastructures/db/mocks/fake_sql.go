// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"database/sql"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/spongebob/infrastructures/db"
)

type FakeSQL struct {
	SqlDBStub        func() *sql.DB
	sqlDBMutex       sync.RWMutex
	sqlDBArgsForCall []struct {
	}
	sqlDBReturns struct {
		result1 *sql.DB
	}
	sqlDBReturnsOnCall map[int]struct {
		result1 *sql.DB
	}
	StartTXStub        func(context.Context, *sql.TxOptions) (*sql.Tx, error)
	startTXMutex       sync.RWMutex
	startTXArgsForCall []struct {
		arg1 context.Context
		arg2 *sql.TxOptions
	}
	startTXReturns struct {
		result1 *sql.Tx
		result2 error
	}
	startTXReturnsOnCall map[int]struct {
		result1 *sql.Tx
		result2 error
	}
	TransactionStub        func(context.Context, *sql.TxOptions, func(*sql.Tx) error) error
	transactionMutex       sync.RWMutex
	transactionArgsForCall []struct {
		arg1 context.Context
		arg2 *sql.TxOptions
		arg3 func(*sql.Tx) error
	}
	transactionReturns struct {
		result1 error
	}
	transactionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSQL) SqlDB() *sql.DB {
	fake.sqlDBMutex.Lock()
	ret, specificReturn := fake.sqlDBReturnsOnCall[len(fake.sqlDBArgsForCall)]
	fake.sqlDBArgsForCall = append(fake.sqlDBArgsForCall, struct {
	}{})
	stub := fake.SqlDBStub
	fakeReturns := fake.sqlDBReturns
	fake.recordInvocation("SqlDB", []interface{}{})
	fake.sqlDBMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSQL) SqlDBCallCount() int {
	fake.sqlDBMutex.RLock()
	defer fake.sqlDBMutex.RUnlock()
	return len(fake.sqlDBArgsForCall)
}

func (fake *FakeSQL) SqlDBCalls(stub func() *sql.DB) {
	fake.sqlDBMutex.Lock()
	defer fake.sqlDBMutex.Unlock()
	fake.SqlDBStub = stub
}

func (fake *FakeSQL) SqlDBReturns(result1 *sql.DB) {
	fake.sqlDBMutex.Lock()
	defer fake.sqlDBMutex.Unlock()
	fake.SqlDBStub = nil
	fake.sqlDBReturns = struct {
		result1 *sql.DB
	}{result1}
}

func (fake *FakeSQL) SqlDBReturnsOnCall(i int, result1 *sql.DB) {
	fake.sqlDBMutex.Lock()
	defer fake.sqlDBMutex.Unlock()
	fake.SqlDBStub = nil
	if fake.sqlDBReturnsOnCall == nil {
		fake.sqlDBReturnsOnCall = make(map[int]struct {
			result1 *sql.DB
		})
	}
	fake.sqlDBReturnsOnCall[i] = struct {
		result1 *sql.DB
	}{result1}
}

func (fake *FakeSQL) StartTX(arg1 context.Context, arg2 *sql.TxOptions) (*sql.Tx, error) {
	fake.startTXMutex.Lock()
	ret, specificReturn := fake.startTXReturnsOnCall[len(fake.startTXArgsForCall)]
	fake.startTXArgsForCall = append(fake.startTXArgsForCall, struct {
		arg1 context.Context
		arg2 *sql.TxOptions
	}{arg1, arg2})
	stub := fake.StartTXStub
	fakeReturns := fake.startTXReturns
	fake.recordInvocation("StartTX", []interface{}{arg1, arg2})
	fake.startTXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSQL) StartTXCallCount() int {
	fake.startTXMutex.RLock()
	defer fake.startTXMutex.RUnlock()
	return len(fake.startTXArgsForCall)
}

func (fake *FakeSQL) StartTXCalls(stub func(context.Context, *sql.TxOptions) (*sql.Tx, error)) {
	fake.startTXMutex.Lock()
	defer fake.startTXMutex.Unlock()
	fake.StartTXStub = stub
}

func (fake *FakeSQL) StartTXArgsForCall(i int) (context.Context, *sql.TxOptions) {
	fake.startTXMutex.RLock()
	defer fake.startTXMutex.RUnlock()
	argsForCall := fake.startTXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSQL) StartTXReturns(result1 *sql.Tx, result2 error) {
	fake.startTXMutex.Lock()
	defer fake.startTXMutex.Unlock()
	fake.StartTXStub = nil
	fake.startTXReturns = struct {
		result1 *sql.Tx
		result2 error
	}{result1, result2}
}

func (fake *FakeSQL) StartTXReturnsOnCall(i int, result1 *sql.Tx, result2 error) {
	fake.startTXMutex.Lock()
	defer fake.startTXMutex.Unlock()
	fake.StartTXStub = nil
	if fake.startTXReturnsOnCall == nil {
		fake.startTXReturnsOnCall = make(map[int]struct {
			result1 *sql.Tx
			result2 error
		})
	}
	fake.startTXReturnsOnCall[i] = struct {
		result1 *sql.Tx
		result2 error
	}{result1, result2}
}

func (fake *FakeSQL) Transaction(arg1 context.Context, arg2 *sql.TxOptions, arg3 func(*sql.Tx) error) error {
	fake.transactionMutex.Lock()
	ret, specificReturn := fake.transactionReturnsOnCall[len(fake.transactionArgsForCall)]
	fake.transactionArgsForCall = append(fake.transactionArgsForCall, struct {
		arg1 context.Context
		arg2 *sql.TxOptions
		arg3 func(*sql.Tx) error
	}{arg1, arg2, arg3})
	stub := fake.TransactionStub
	fakeReturns := fake.transactionReturns
	fake.recordInvocation("Transaction", []interface{}{arg1, arg2, arg3})
	fake.transactionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSQL) TransactionCallCount() int {
	fake.transactionMutex.RLock()
	defer fake.transactionMutex.RUnlock()
	return len(fake.transactionArgsForCall)
}

func (fake *FakeSQL) TransactionCalls(stub func(context.Context, *sql.TxOptions, func(*sql.Tx) error) error) {
	fake.transactionMutex.Lock()
	defer fake.transactionMutex.Unlock()
	fake.TransactionStub = stub
}

func (fake *FakeSQL) TransactionArgsForCall(i int) (context.Context, *sql.TxOptions, func(*sql.Tx) error) {
	fake.transactionMutex.RLock()
	defer fake.transactionMutex.RUnlock()
	argsForCall := fake.transactionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSQL) TransactionReturns(result1 error) {
	fake.transactionMutex.Lock()
	defer fake.transactionMutex.Unlock()
	fake.TransactionStub = nil
	fake.transactionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSQL) TransactionReturnsOnCall(i int, result1 error) {
	fake.transactionMutex.Lock()
	defer fake.transactionMutex.Unlock()
	fake.TransactionStub = nil
	if fake.transactionReturnsOnCall == nil {
		fake.transactionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.transactionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSQL) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sqlDBMutex.RLock()
	defer fake.sqlDBMutex.RUnlock()
	fake.startTXMutex.RLock()
	defer fake.startTXMutex.RUnlock()
	fake.transactionMutex.RLock()
	defer fake.transactionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSQL) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.SQL = new(FakeSQL)
